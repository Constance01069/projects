library(sensitivity)
d <- 3
n <- 1000
X1 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
X2 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
sa <- sobolSalt(model=ishigami.fun, X1, X2, scheme="B", nboot=100)
library(ggplot2)
ggplot(sa, choice = 1) ; ggplot(sa, choice = 2)
library(sensitivity)
d <- 3
n <- 1000
X1 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
X2 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
sa <- sobolSalt(model=ishigami.fun, X1, X2, scheme="B", nboot=100)
library(ggplot2)
ggplot(sa, choice = 1) ; ggplot(sa, choice = 2)
library(sensitivity)
d <- 3
n <- 1000
X1 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
X2 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
sa <- sobolSalt(model=ishigami.fun, X1, X2, scheme="B", nboot=100)
library(ggplot2)
ggplot(sa, choice = 1) ; ggplot(sa, choice = 2)
library(sensitivity)
d <- 3
n <- 1000
X1 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
X2 <- data.frame(matrix(runif(d*n, min = -pi, max = pi), nrow=n))
sa <- sobolSalt(model=ishigami.fun, X1, X2, scheme="B", nboot=100)
library(ggplot2)
ggplot(sa, choice = 1) ; ggplot(sa, choice = 2)
curve(ishigami.fun(c(1, x, 0)), from = -pi, to = pi,
col = "blue", xlab = "Variable qui varie", ylab = "Valeur de la fonction",
main = "Graphe 2D de ishigami.fun avec une variable fixe")
ishigami.fun(c(1, 2, 0))
str(ishigami)
ishigami.fun(1)
ishigami.fun(1,2,3)
ishigami.fun(1)
sa<-c(1,2,3)
ishigami.fun(1)
ishigami1 <- function(X1, X2, X3) {
A <- 7
B <- 0.1
sin(X1) + A * sin(X2) ^ 2 + B * X3 ^ 4 * sin(X1)
}
ishigami1(1,2,3)
ishigami1(c(1,2,3))
ishigami1 <- function(X1, X2, X3) {
A <- 7
B <- 0.1
sin(X1) + A * sin(X2) ^ 2 + B * X3 ^ 4 * sin(X1)
}
curve(expr=ishigami1(1,x,2),from=-pi, to=pi)
ishigami1 <- function(X1, X2, X3) {
A <- 7
B <- 0.1
sin(X1) + A * sin(X2) ^ 2 + B * X3 ^ 4 * sin(X1)
}
curve(expr=ishigami1(x,1,2),from=-pi, to=pi)
ishigami.fun(1,2,3)
ishigami.fun(1)
ishigami1(1,2,3)
ishigami1(1,2,3)
ishigami1(1,2,3)
ishigami1(1,2,3)
ishigami1(1,2,3)
knitr::opts_chunk$set(echo = TRUE)
modlin <- function(X) apply(X, 1, sum) # Linear model
mu <- rep(0, 3) # Mean vector
sig <- c(1, 1, 2) # Variance vector
ro <- 0.9 # correlation coefficient (between X2 and X3)
Cormat <- matrix(c(1,0,0,0,1,ro,0,ro,1),3,3) # Correlation matrix
Covmat <- ( sig %*% t(sig) ) * Cormat # Covariance matrix
set.seed(12345) # To reproduce the same results
n <- 1e4
library(mvtnorm) # Multivariate Gaussian variables
Xall <- function(n) rmvnorm(n, mu, Covmat) # Sampling function
X1 <- data.frame(Xall(n)) ; X2 <- data.frame(Xall(n))
library(sensitivity)
sa <- sobol(modlin, X1=X1, X2=X2, order=list(1,2:3), nboot=100)
print(sa$V[-1,]/sa$V[1,1]) # Divide by variance to get Sobol'
library(condMVNorm) # Conditional multivar. Gaussian variables
Xset <- function(n, Sj, Sjc, xjc){
if (is.null(Sjc)){
if (length(Sj) == 1){ rnorm(n, mu[Sj], sqrt(Covmat[Sj,Sj]))
}
else{ rmvnorm(n, mu[Sj], Covmat[Sj,Sj])}
}
else{
rcmvnorm(n,mu,Covmat,dependent.ind=Sj,given.ind=Sjc,X.given=xjc)
}}
modlin <- function(X) apply(X, 1, sum) # Linear model
mu <- rep(0, 3) # Mean vector
sig <- c(1, 1, 2) # Variance vector
ro <- 0.9 # correlation coefficient (between X2 and X3)
Cormat <- matrix(c(1,0,0,0,1,ro,0,ro,1),3,3) # Correlation matrix
Covmat <- ( sig %*% t(sig) ) * Cormat # Covariance matrix
set.seed(12345) # To reproduce the same results
n <- 1e4
library(mvtnorm) # Multivariate Gaussian variables
Xall <- function(n) rmvnorm(n, mu, Covmat) # Sampling function
X1 <- data.frame(Xall(n)) ; X2 <- data.frame(Xall(n))
library(sensitivity)
sa <- sobol(modlin, X1=X1, X2=X2, order=list(1,2:3), nboot=100)
print(sa$V[-1,]/sa$V[1,1]) # Divide by variance to get Sobol'
library(condMVNorm) # Conditional multivar. Gaussian variables
Xset <- function(n, Sj, Sjc, xjc){
if (is.null(Sjc)){
if (length(Sj) == 1){ rnorm(n, mu[Sj], sqrt(Covmat[Sj,Sj]))
}
else{ rmvnorm(n, mu[Sj], Covmat[Sj,Sj])}
}
else{
rcmvnorm(n,mu,Covmat,dependent.ind=Sj,given.ind=Sjc,X.given=xjc)
}}
library(sensitivity)
sa <- shapleyPermEx(modlin, Xall, Xset, d=3, Nv=1e4, No=1e3, Ni=3)
library(ggplot2) ;ggplot(sa, ylim=c(0,1.5))
n <- 1000
X <- Xall(n) ; Y <- modlin(X)
Shap <- sobolshap_knn(model = NULL, X = X, return.shap = TRUE)
tell(Shap,Y)
print(Shap$Shap)
library(condMVNorm) # Conditional multivar. Gaussian variables
Xset <- function(n, Sj, Sjc, xjc){
if (is.null(Sjc)){
if (length(Sj) == 1){ rnorm(n, mu[Sj], sqrt(Covmat[Sj,Sj]))
}
else{ rmvnorm(n, mu[Sj], Covmat[Sj,Sj])}
}
else{
rcmvnorm(n,mu,Covmat,dependent.ind=Sj,given.ind=Sjc,X.given=xjc)
}}
library(sensitivity)
sa <- shapleyPermEx(modlin, Xall, Xset, d=3, Nv=1e4, No=1e3, Ni=3)
library(ggplot2) ;ggplot(sa, ylim=c(0,1.5))
n <- 1000
X <- Xall(n) ; Y <- modlin(X)
Shap <- sobolshap_knn(model = NULL, X = X, return.shap = TRUE)
tell(Shap,Y)
print(Shap$Shap)
ishigami1 <- function(X1, X2, X3) {
A <- 7
B <- 0.1
sin(X1) + A * sin(X2) ^ 2 + B * X3 ^ 4 * sin(X1)
}
curve(ishigami1(x,pi/2,pi/3), from = -pi, to = pi,
col = "blue", main = "Graphe de la fonction Ishigami en fonction de x1 (x2 et x3 fixees)")
ishigami1 <- function(X1, X2, X3) {
A <- 7
B <- 0.1
sin(X1) + A * sin(X2) ^ 2 + B * X3 ^ 4 * sin(X1)
}
curve(ishigami1(x,pi/2,pi/3), from = -pi, to = pi,
col = "blue", main = "Graphe de la fonction Ishigami en fonction de x1 (x2 et x3 fixees)")
curve(ishigami1(pi/2,x,pi/3), from = -pi, to = pi,
col = "blue", main = "Graphe de la fonction Ishigami en fonction de x2 (x1 et x3 fixees)")
curve(ishigami1(pi/2,pi/3,x), from = -pi, to = pi,
col = "blue", main = "Graphe de la fonction Ishigami en fonction de x3 (x1 et x2 fixees)")
